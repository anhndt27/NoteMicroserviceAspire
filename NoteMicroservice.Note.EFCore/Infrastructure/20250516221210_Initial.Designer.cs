// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteMicroservice.Note.Domain.Context;

#nullable disable

namespace NoteMicroservice.Note.EFCore.Infrastructure
{
    [DbContext(typeof(NoteDbContext))]
    [Migration("20250516221210_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoteMicroservice.Note.Domain.Entity.NoteContent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("NoteContents");
                });

            modelBuilder.Entity("NoteMicroservice.Note.Domain.Entity.NoteContentPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("PrincipalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrincipalType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteContentPermissions");
                });

            modelBuilder.Entity("NoteMicroservice.Note.Domain.Entity.NoteContentPermission", b =>
                {
                    b.HasOne("NoteMicroservice.Note.Domain.Entity.NoteContent", "Note")
                        .WithMany("NoteContentPermissions")
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("NoteMicroservice.Note.Domain.Entity.NoteContent", b =>
                {
                    b.Navigation("NoteContentPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
